<html>
<head>
<title>Javascript Box - OOP demo</title>
<style type="text/css">
/* css reset */
*
{
	margin: 0;
	padding: 0;
}
/* the #svg id is what i use to make the height and width the size of the browser */
#svg
{
	height: 100%;
	width: 100%;
	background-color: black;
}
</style>
</head>
<body>
<svg id="svg" xmlns="http://www.w3.org/2000/svg"></svg>
<script>

//this is the mousedown function of the code that was supplied by the dojo
// i actually removed the immediately invoked function to free up scope for all these variables

var mousedown_time;
var time_pressed;

function getTime(){
	var date = new Date();
	return date.getTime();
}

document.onmousedown = function(e){
	mousedown_time = getTime();
}
document.onmouseup = function(e){
	time_pressed = getTime() - mousedown_time;
	console.log('You held your mouse down for', time_pressed, 'miliseconds.');
}

function Circle(cx, cy, html_id)
{
	var html_id = html_id;
	// in the circle object creator, we pass time_pressed and divide it by 10
	this.info = {
		id: html_id,
		cx: cx, 
		cy: cy,
		 r: time_pressed/10
	};
	//private function that generates a random veolcity
	var randomVelocity = function(speed){
		check = Math.floor(Math.random()*3);
		if(check===2)
		{
			return speed;
		}
		else if(check===1)
		{
			return -speed;
		}
		else
		{
			return 0;
		}
		//return Math.random()*(max-min) + min;
	}
	this.initialize = function(){
	//give a random velocity for the circle info object
		this.info.velocity = {
			x: randomVelocity(3),
			y: randomVelocity(3)
		}
		//this makes sure we don't get circles with zero velocity
		while(this.info.velocity.x===0&&this.info.velocity.y===0)
		{
			this.info.velocity = {
				x: randomVelocity(3),
				y: randomVelocity(3)
			}
		}
	//create a circle
	//here is where we get our x and y, the radius of our circle, set the html_id, and style the color
		var circle = makeSVG('circle',
		{ cx: this.info.cx,
		  cy: this.info.cy,
		  r: this.info.r,
		  id: html_id,
		  style: "fill: white"
		});

		// set and append circles inside the svg element
		var elem = document.getElementById('svg');
		elem.appendChild(circle);

	}
	// update is called within our loop function in the playground
	// which is then set into our setinterval (or game loop)
	this.update = function(time){
		var el = document.getElementById(html_id);

		//see if the circle is going outside the border. if it is, reverse the velocity
		// subtracting the circle radius from client width and client height ensure
		// our circles bounce at their edge not at their center
		if( this.info.cx > document.body.clientWidth - this.info.r || this.info.cx < this.info.r)
		{
			this.info.velocity.x = this.info.velocity.x * -1;
		}
		if( this.info.cy > document.body.clientHeight - this.info.r || this.info.cy < this.info.r)
		{
			this.info.velocity.y = this.info.velocity.y * -1;
		}
		this.info.cx = this.info.cx + this.info.velocity.x*time;
		this.info.cy = this.info.cy + this.info.velocity.y*time;
		el.setAttribute("cx", this.info.cx);
		el.setAttribute("cy", this.info.cy);
	}
	//creates the SVG element and returns it
	var makeSVG = function(tag, attrs) {
		var el= document.createElementNS('http://www.w3.org/2000/svg', tag);
		for (var k in attrs)
		{
			el.setAttribute(k, attrs[k]);
		}
		return el;
	}

	this.initialize();
}
function PlayGround()
{
	var counter = 0; //counts the number of circles created
	var circles = [ ]; //array that will hold all the circles created in the app
	// random hex color function
	var randomFill = function()
	{
		var arr = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];
		var output = '#';
		for(var i=0;i<6;i++)
		{
			var t = Math.floor(Math.random()*arr.length);
			output += arr[t];
		}
		return output;

	}
	//a loop that updates the circle's position on the screen
	this.loop = function(){
		for(i in circles)
		{
			// this loop is going to loop through all of the circles for every circle
			// for i, we're going to loop through every other circle j
			for(j in circles)
			{
				// this statement is set up to ignore the same circle.
				// instead of running any of our extra code, it hits the contiue statement
				// which will got back to our j in circles loop and advance it to the next circle
				// the whole point is to never compare a circle to itself
				if(i===j)
				{
					continue;
				}
				// pythagorean theorem, comparing the total of the radiuses to the square root of the something something
				var check = Math.sqrt(Math.pow(circles[i].info.cx-circles[j].info.cx,2)+Math.pow(circles[i].info.cy-circles[j].info.cy,2));
				var r = circles[i].info.r+circles[j].info.r;
				// if r is ever greater than check, they collided!
				if(check<r)
				{
					// Collided!
					// we're going to now reverse the velocity x and y of our i and j circles
					circles[i].info.velocity.x *= -1;
					circles[i].info.velocity.y *= -1;
					// this invokes the random fill function earlier in the code
					// document.getElementById(circles[i].info.id) is what we do to select
					// our circles on an dom level.
					document.getElementById(circles[i].info.id).style.fill = randomFill();
					document.getElementById(circles[j].info.id).style.fill = randomFill();
					circles[j].info.velocity.x *= -1;
					circles[j].info.velocity.y *= -1;
					// this fixes the bug earlier in our code. it pushes circles away from each other
					// so that they have a much lower chance of getting caught inside one another
					while(check <= r) {
						circles[j].info.cx += circles[j].info.velocity.x
						circles[j].info.cy += circles[j].info.velocity.y
						check = Math.sqrt(Math.pow(circles[i].info.cx-circles[j].info.cx,2)+Math.pow(circles[i].info.cy-circles[j].info.cy,2));
					}
					break;
				}
			}
			circles[i].update(1);
		}
	}
	this.createNewCircle = function(x,y){
		var new_circle = new Circle(x,y,counter++);
		circles.push(new_circle);
		// console.log('created a new circle!', new_circle);
	}
	// create one circle when the game starts
	// this.createNewCircle(document.body.clientWidth/2, document.body.clientHeight/2);
}
// instance the playground
var playground = new PlayGround();
setInterval(playground.loop, 5);
document.onclick = function(e){
	playground.createNewCircle(e.clientX,e.clientY);
}

</script>
</body>
</html>